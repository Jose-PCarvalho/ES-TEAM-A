// Generated by gencpp from file es_vision/seg_params.msg
// DO NOT EDIT!


#ifndef ES_VISION_MESSAGE_SEG_PARAMS_H
#define ES_VISION_MESSAGE_SEG_PARAMS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace es_vision
{
template <class ContainerAllocator>
struct seg_params_
{
  typedef seg_params_<ContainerAllocator> Type;

  seg_params_()
    : H_MIN(0)
    , H_MAX(0)
    , S_MIN(0)
    , S_MAX(0)
    , V_MIN(0)
    , V_MAX(0)  {
    }
  seg_params_(const ContainerAllocator& _alloc)
    : H_MIN(0)
    , H_MAX(0)
    , S_MIN(0)
    , S_MAX(0)
    , V_MIN(0)
    , V_MAX(0)  {
  (void)_alloc;
    }



   typedef uint8_t _H_MIN_type;
  _H_MIN_type H_MIN;

   typedef uint8_t _H_MAX_type;
  _H_MAX_type H_MAX;

   typedef uint8_t _S_MIN_type;
  _S_MIN_type S_MIN;

   typedef uint8_t _S_MAX_type;
  _S_MAX_type S_MAX;

   typedef uint8_t _V_MIN_type;
  _V_MIN_type V_MIN;

   typedef uint8_t _V_MAX_type;
  _V_MAX_type V_MAX;





  typedef boost::shared_ptr< ::es_vision::seg_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::es_vision::seg_params_<ContainerAllocator> const> ConstPtr;

}; // struct seg_params_

typedef ::es_vision::seg_params_<std::allocator<void> > seg_params;

typedef boost::shared_ptr< ::es_vision::seg_params > seg_paramsPtr;
typedef boost::shared_ptr< ::es_vision::seg_params const> seg_paramsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::es_vision::seg_params_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::es_vision::seg_params_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::es_vision::seg_params_<ContainerAllocator1> & lhs, const ::es_vision::seg_params_<ContainerAllocator2> & rhs)
{
  return lhs.H_MIN == rhs.H_MIN &&
    lhs.H_MAX == rhs.H_MAX &&
    lhs.S_MIN == rhs.S_MIN &&
    lhs.S_MAX == rhs.S_MAX &&
    lhs.V_MIN == rhs.V_MIN &&
    lhs.V_MAX == rhs.V_MAX;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::es_vision::seg_params_<ContainerAllocator1> & lhs, const ::es_vision::seg_params_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace es_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::es_vision::seg_params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::es_vision::seg_params_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::es_vision::seg_params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::es_vision::seg_params_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::es_vision::seg_params_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::es_vision::seg_params_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::es_vision::seg_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f911a5cf7426181a62067995d3f9edd";
  }

  static const char* value(const ::es_vision::seg_params_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f911a5cf7426181ULL;
  static const uint64_t static_value2 = 0xa62067995d3f9eddULL;
};

template<class ContainerAllocator>
struct DataType< ::es_vision::seg_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "es_vision/seg_params";
  }

  static const char* value(const ::es_vision::seg_params_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::es_vision::seg_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 H_MIN\n"
"uint8 H_MAX\n"
"uint8 S_MIN\n"
"uint8 S_MAX\n"
"uint8 V_MIN\n"
"uint8 V_MAX\n"
;
  }

  static const char* value(const ::es_vision::seg_params_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::es_vision::seg_params_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.H_MIN);
      stream.next(m.H_MAX);
      stream.next(m.S_MIN);
      stream.next(m.S_MAX);
      stream.next(m.V_MIN);
      stream.next(m.V_MAX);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct seg_params_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::es_vision::seg_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::es_vision::seg_params_<ContainerAllocator>& v)
  {
    s << indent << "H_MIN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.H_MIN);
    s << indent << "H_MAX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.H_MAX);
    s << indent << "S_MIN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.S_MIN);
    s << indent << "S_MAX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.S_MAX);
    s << indent << "V_MIN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V_MIN);
    s << indent << "V_MAX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V_MAX);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ES_VISION_MESSAGE_SEG_PARAMS_H
