// Generated by gencpp from file sensor_msgs_ext/gnss_fix.msg
// DO NOT EDIT!


#ifndef SENSOR_MSGS_EXT_MESSAGE_GNSS_FIX_H
#define SENSOR_MSGS_EXT_MESSAGE_GNSS_FIX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_msgs_ext
{
template <class ContainerAllocator>
struct gnss_fix_
{
  typedef gnss_fix_<ContainerAllocator> Type;

  gnss_fix_()
    : type(0)
    , mode_selection(0)
    , mode(0)
    , satellite_count(0)  {
    }
  gnss_fix_(const ContainerAllocator& _alloc)
    : type(0)
    , mode_selection(0)
    , mode(0)
    , satellite_count(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _mode_selection_type;
  _mode_selection_type mode_selection;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _satellite_count_type;
  _satellite_count_type satellite_count;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_NO_FIX)
  #undef TYPE_NO_FIX
#endif
#if defined(_WIN32) && defined(TYPE_FIX)
  #undef TYPE_FIX
#endif
#if defined(_WIN32) && defined(TYPE_DIFFERENTIAL)
  #undef TYPE_DIFFERENTIAL
#endif
#if defined(_WIN32) && defined(TYPE_RTK_FIXED)
  #undef TYPE_RTK_FIXED
#endif
#if defined(_WIN32) && defined(TYPE_RTK_FLOAT)
  #undef TYPE_RTK_FLOAT
#endif
#if defined(_WIN32) && defined(TYPE_DEAD_RECKONING)
  #undef TYPE_DEAD_RECKONING
#endif
#if defined(_WIN32) && defined(MODE_SELECTION_MANUAL)
  #undef MODE_SELECTION_MANUAL
#endif
#if defined(_WIN32) && defined(MODE_SELECTION_AUTOMATIC)
  #undef MODE_SELECTION_AUTOMATIC
#endif
#if defined(_WIN32) && defined(MODE_NONE)
  #undef MODE_NONE
#endif
#if defined(_WIN32) && defined(MODE_2D)
  #undef MODE_2D
#endif
#if defined(_WIN32) && defined(MODE_3D)
  #undef MODE_3D
#endif

  enum {
    TYPE_NO_FIX = 0u,
    TYPE_FIX = 1u,
    TYPE_DIFFERENTIAL = 2u,
    TYPE_RTK_FIXED = 4u,
    TYPE_RTK_FLOAT = 5u,
    TYPE_DEAD_RECKONING = 6u,
    MODE_SELECTION_MANUAL = 0u,
    MODE_SELECTION_AUTOMATIC = 1u,
    MODE_NONE = 0u,
    MODE_2D = 1u,
    MODE_3D = 2u,
  };


  typedef boost::shared_ptr< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> const> ConstPtr;

}; // struct gnss_fix_

typedef ::sensor_msgs_ext::gnss_fix_<std::allocator<void> > gnss_fix;

typedef boost::shared_ptr< ::sensor_msgs_ext::gnss_fix > gnss_fixPtr;
typedef boost::shared_ptr< ::sensor_msgs_ext::gnss_fix const> gnss_fixConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.mode_selection == rhs.mode_selection &&
    lhs.mode == rhs.mode &&
    lhs.satellite_count == rhs.satellite_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_msgs_ext

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac20d1087808fbd5ae6cee3e0e0bee4d";
  }

  static const char* value(const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac20d1087808fbd5ULL;
  static const uint64_t static_value2 = 0xae6cee3e0e0bee4dULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs_ext/gnss_fix";
  }

  static const char* value(const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Describes the status of a GNSS receiver's fix.\n"
"\n"
"uint8 type                            # The current fix type.\n"
"uint8 TYPE_NO_FIX = 0\n"
"uint8 TYPE_FIX = 1\n"
"uint8 TYPE_DIFFERENTIAL = 2\n"
"uint8 TYPE_RTK_FIXED = 4\n"
"uint8 TYPE_RTK_FLOAT = 5\n"
"uint8 TYPE_DEAD_RECKONING = 6\n"
"\n"
"uint8 mode_selection                  # The selection type for the operating mode.\n"
"uint8 MODE_SELECTION_MANUAL = 0\n"
"uint8 MODE_SELECTION_AUTOMATIC = 1\n"
"\n"
"uint8 mode                            # The current operating mode.\n"
"uint8 MODE_NONE = 0\n"
"uint8 MODE_2D = 1\n"
"uint8 MODE_3D = 2\n"
"\n"
"uint8 satellite_count                 # The number of satellites used in the fix solution.\n"
;
  }

  static const char* value(const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.mode_selection);
      stream.next(m.mode);
      stream.next(m.satellite_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gnss_fix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs_ext::gnss_fix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_msgs_ext::gnss_fix_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "mode_selection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_selection);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "satellite_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satellite_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_EXT_MESSAGE_GNSS_FIX_H
