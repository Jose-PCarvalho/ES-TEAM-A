// Generated by gencpp from file sensor_msgs_ext/analog_voltage.msg
// DO NOT EDIT!


#ifndef SENSOR_MSGS_EXT_MESSAGE_ANALOG_VOLTAGE_H
#define SENSOR_MSGS_EXT_MESSAGE_ANALOG_VOLTAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_msgs_ext
{
template <class ContainerAllocator>
struct analog_voltage_
{
  typedef analog_voltage_<ContainerAllocator> Type;

  analog_voltage_()
    : voltage(0.0)  {
    }
  analog_voltage_(const ContainerAllocator& _alloc)
    : voltage(0.0)  {
  (void)_alloc;
    }



   typedef double _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> const> ConstPtr;

}; // struct analog_voltage_

typedef ::sensor_msgs_ext::analog_voltage_<std::allocator<void> > analog_voltage;

typedef boost::shared_ptr< ::sensor_msgs_ext::analog_voltage > analog_voltagePtr;
typedef boost::shared_ptr< ::sensor_msgs_ext::analog_voltage const> analog_voltageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator2> & rhs)
{
  return lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_msgs_ext

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd1e97d74e6d797b46bc5a51e820e6ae";
  }

  static const char* value(const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd1e97d74e6d797bULL;
  static const uint64_t static_value2 = 0x46bc5a51e820e6aeULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs_ext/analog_voltage";
  }

  static const char* value(const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reports an analog voltage measurements.\n"
"\n"
"float64 voltage     # The measured analog voltage [v]\n"
;
  }

  static const char* value(const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct analog_voltage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs_ext::analog_voltage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_msgs_ext::analog_voltage_<ContainerAllocator>& v)
  {
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_EXT_MESSAGE_ANALOG_VOLTAGE_H
