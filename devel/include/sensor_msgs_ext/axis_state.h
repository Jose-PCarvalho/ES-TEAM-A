// Generated by gencpp from file sensor_msgs_ext/axis_state.msg
// DO NOT EDIT!


#ifndef SENSOR_MSGS_EXT_MESSAGE_AXIS_STATE_H
#define SENSOR_MSGS_EXT_MESSAGE_AXIS_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_msgs_ext
{
template <class ContainerAllocator>
struct axis_state_
{
  typedef axis_state_<ContainerAllocator> Type;

  axis_state_()
    : position(0.0)
    , velocity(0.0)
    , acceleration(0.0)  {
    }
  axis_state_(const ContainerAllocator& _alloc)
    : position(0.0)
    , velocity(0.0)
    , acceleration(0.0)  {
  (void)_alloc;
    }



   typedef double _position_type;
  _position_type position;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::sensor_msgs_ext::axis_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs_ext::axis_state_<ContainerAllocator> const> ConstPtr;

}; // struct axis_state_

typedef ::sensor_msgs_ext::axis_state_<std::allocator<void> > axis_state;

typedef boost::shared_ptr< ::sensor_msgs_ext::axis_state > axis_statePtr;
typedef boost::shared_ptr< ::sensor_msgs_ext::axis_state const> axis_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_msgs_ext::axis_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_msgs_ext::axis_state_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::axis_state_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_msgs_ext::axis_state_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::axis_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_msgs_ext

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::axis_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::axis_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::axis_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fac91d40217087ed5dbc79c40ec194e4";
  }

  static const char* value(const ::sensor_msgs_ext::axis_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfac91d40217087edULL;
  static const uint64_t static_value2 = 0x5dbc79c40ec194e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs_ext/axis_state";
  }

  static const char* value(const ::sensor_msgs_ext::axis_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reports the instantaneous state of an axis.\n"
"\n"
"float64 position            # The current position of the axis [rad]\n"
"float64 velocity            # The current velocity of the axis [rad/s]\n"
"float64 acceleration        # The current acceleration of the axis [rad/s^2]\n"
;
  }

  static const char* value(const ::sensor_msgs_ext::axis_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct axis_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs_ext::axis_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_msgs_ext::axis_state_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_EXT_MESSAGE_AXIS_STATE_H
