// Generated by gencpp from file sensor_msgs_ext/calibrate_gyroscopeRequest.msg
// DO NOT EDIT!


#ifndef SENSOR_MSGS_EXT_MESSAGE_CALIBRATE_GYROSCOPEREQUEST_H
#define SENSOR_MSGS_EXT_MESSAGE_CALIBRATE_GYROSCOPEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_msgs_ext
{
template <class ContainerAllocator>
struct calibrate_gyroscopeRequest_
{
  typedef calibrate_gyroscopeRequest_<ContainerAllocator> Type;

  calibrate_gyroscopeRequest_()
    : averaging_period(0)  {
    }
  calibrate_gyroscopeRequest_(const ContainerAllocator& _alloc)
    : averaging_period(0)  {
  (void)_alloc;
    }



   typedef uint32_t _averaging_period_type;
  _averaging_period_type averaging_period;





  typedef boost::shared_ptr< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct calibrate_gyroscopeRequest_

typedef ::sensor_msgs_ext::calibrate_gyroscopeRequest_<std::allocator<void> > calibrate_gyroscopeRequest;

typedef boost::shared_ptr< ::sensor_msgs_ext::calibrate_gyroscopeRequest > calibrate_gyroscopeRequestPtr;
typedef boost::shared_ptr< ::sensor_msgs_ext::calibrate_gyroscopeRequest const> calibrate_gyroscopeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.averaging_period == rhs.averaging_period;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator1> & lhs, const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_msgs_ext

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf0a54849407c21e7e7bc0aef95791c7";
  }

  static const char* value(const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf0a54849407c21eULL;
  static const uint64_t static_value2 = 0x7e7bc0aef95791c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs_ext/calibrate_gyroscopeRequest";
  }

  static const char* value(const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Requests a zero-velocity calibration of a gyroscope.\n"
"\n"
"uint32 averaging_period     # The number of milliseconds to average the bias calculation over.\n"
;
  }

  static const char* value(const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.averaging_period);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calibrate_gyroscopeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_msgs_ext::calibrate_gyroscopeRequest_<ContainerAllocator>& v)
  {
    s << indent << "averaging_period: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.averaging_period);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_EXT_MESSAGE_CALIBRATE_GYROSCOPEREQUEST_H
