# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_msgs_ext/get_proximity_configurationRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class get_proximity_configurationRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "sensor_msgs_ext/get_proximity_configurationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Retrieves the configuration of a proximity sensor.

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(get_proximity_configurationRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_msgs_ext/get_proximity_configurationResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class get_proximity_configurationResponse(genpy.Message):
  _md5sum = "bc6aa8c1ba0744c7248467a89aa5b3e1"
  _type = "sensor_msgs_ext/get_proximity_configurationResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 radiation_type                    # The type of radiation used by the sensor.
uint8 RADIATION_TYPE_UNSPECIFIED=255
uint8 RADIATION_TYPE_ULTRASOUND=0
uint8 RADIATION_TYPE_INFRARED=1
uint8 RADIATION_TYPE_RADAR=2

float32 min_range                       # The minimum detection range of the sensor [m]
float32 max_range                       # The maximum detection range of the sensor [m]

float32 field_of_view                   # The maximum FoV of the sensor [rad]
"""
  # Pseudo-constants
  RADIATION_TYPE_UNSPECIFIED = 255
  RADIATION_TYPE_ULTRASOUND = 0
  RADIATION_TYPE_INFRARED = 1
  RADIATION_TYPE_RADAR = 2

  __slots__ = ['radiation_type','min_range','max_range','field_of_view']
  _slot_types = ['uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       radiation_type,min_range,max_range,field_of_view

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(get_proximity_configurationResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.radiation_type is None:
        self.radiation_type = 0
      if self.min_range is None:
        self.min_range = 0.
      if self.max_range is None:
        self.max_range = 0.
      if self.field_of_view is None:
        self.field_of_view = 0.
    else:
      self.radiation_type = 0
      self.min_range = 0.
      self.max_range = 0.
      self.field_of_view = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3f().pack(_x.radiation_type, _x.min_range, _x.max_range, _x.field_of_view))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.radiation_type, _x.min_range, _x.max_range, _x.field_of_view,) = _get_struct_B3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3f().pack(_x.radiation_type, _x.min_range, _x.max_range, _x.field_of_view))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.radiation_type, _x.min_range, _x.max_range, _x.field_of_view,) = _get_struct_B3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3f = None
def _get_struct_B3f():
    global _struct_B3f
    if _struct_B3f is None:
        _struct_B3f = struct.Struct("<B3f")
    return _struct_B3f
class get_proximity_configuration(object):
  _type          = 'sensor_msgs_ext/get_proximity_configuration'
  _md5sum = 'bc6aa8c1ba0744c7248467a89aa5b3e1'
  _request_class  = get_proximity_configurationRequest
  _response_class = get_proximity_configurationResponse
