# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_msgs_ext/gnss_track.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gnss_track(genpy.Message):
  _md5sum = "81e644c78713ede189d0f70c2953dc7b"
  _type = "sensor_msgs_ext/gnss_track"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# An instantaneous velocity track as measured by a GNSS receiver.

uint8 reference                       # The direction that the heading is in reference to.
uint8 REFERENCE_TRUE_NORTH = 0
uint8 REFERENCE_MAGNETIC_NORTH = 1

float64 heading                         # The global heading of the track w.r.t. the reference [rad].
float64 speed                           # The scalar speed of the track, [m/s]"""
  # Pseudo-constants
  REFERENCE_TRUE_NORTH = 0
  REFERENCE_MAGNETIC_NORTH = 1

  __slots__ = ['reference','heading','speed']
  _slot_types = ['uint8','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reference,heading,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gnss_track, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reference is None:
        self.reference = 0
      if self.heading is None:
        self.heading = 0.
      if self.speed is None:
        self.speed = 0.
    else:
      self.reference = 0
      self.heading = 0.
      self.speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2d().pack(_x.reference, _x.heading, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.reference, _x.heading, _x.speed,) = _get_struct_B2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2d().pack(_x.reference, _x.heading, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.reference, _x.heading, _x.speed,) = _get_struct_B2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2d = None
def _get_struct_B2d():
    global _struct_B2d
    if _struct_B2d is None:
        _struct_B2d = struct.Struct("<B2d")
    return _struct_B2d
