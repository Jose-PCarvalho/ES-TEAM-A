# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_msgs_ext/gnss_fix.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gnss_fix(genpy.Message):
  _md5sum = "ac20d1087808fbd5ae6cee3e0e0bee4d"
  _type = "sensor_msgs_ext/gnss_fix"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Describes the status of a GNSS receiver's fix.

uint8 type                            # The current fix type.
uint8 TYPE_NO_FIX = 0
uint8 TYPE_FIX = 1
uint8 TYPE_DIFFERENTIAL = 2
uint8 TYPE_RTK_FIXED = 4
uint8 TYPE_RTK_FLOAT = 5
uint8 TYPE_DEAD_RECKONING = 6

uint8 mode_selection                  # The selection type for the operating mode.
uint8 MODE_SELECTION_MANUAL = 0
uint8 MODE_SELECTION_AUTOMATIC = 1

uint8 mode                            # The current operating mode.
uint8 MODE_NONE = 0
uint8 MODE_2D = 1
uint8 MODE_3D = 2

uint8 satellite_count                 # The number of satellites used in the fix solution."""
  # Pseudo-constants
  TYPE_NO_FIX = 0
  TYPE_FIX = 1
  TYPE_DIFFERENTIAL = 2
  TYPE_RTK_FIXED = 4
  TYPE_RTK_FLOAT = 5
  TYPE_DEAD_RECKONING = 6
  MODE_SELECTION_MANUAL = 0
  MODE_SELECTION_AUTOMATIC = 1
  MODE_NONE = 0
  MODE_2D = 1
  MODE_3D = 2

  __slots__ = ['type','mode_selection','mode','satellite_count']
  _slot_types = ['uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,mode_selection,mode,satellite_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gnss_fix, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.mode_selection is None:
        self.mode_selection = 0
      if self.mode is None:
        self.mode = 0
      if self.satellite_count is None:
        self.satellite_count = 0
    else:
      self.type = 0
      self.mode_selection = 0
      self.mode = 0
      self.satellite_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.type, _x.mode_selection, _x.mode, _x.satellite_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.type, _x.mode_selection, _x.mode, _x.satellite_count,) = _get_struct_4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.type, _x.mode_selection, _x.mode, _x.satellite_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.type, _x.mode_selection, _x.mode, _x.satellite_count,) = _get_struct_4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
